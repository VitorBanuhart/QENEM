@{
    ViewData["Title"] = "Realizando Simulado";
    Layout = null;
}

<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .progress-indicator {
            display: flex;
            gap: 8px;
        }

        .progress-dot {
            width: 20px;
            height: 20px;
            border-radius: 50%;
            border: 2px solid #0d6efd;
        }

            .progress-dot.active {
                background-color: #0d6efd;
            }

            .progress-dot.answered {
                background-color: #d1e7dd;
                border-color: #0f5132;
            }

        .option-label {
            display: block;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            margin-bottom: 10px;
            cursor: pointer;
        }

            .option-label:hover {
                background-color: #f0f0f0;
            }

        input[type="radio"] {
            display: none;
        }

            input[type="radio"]:checked + .option-label {
                border-color: #0d6efd;
                background-color: #cfe2ff;
            }
    </style>
</head>
<body class="bg-light">
    <div class="container my-5">
        <div class="card p-4">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <span id="timer" class="badge bg-primary fs-5">00:00:00</span>
                <div>
                    <h5>@Model.SimuladoNome</h5>
                    <small class="text-muted">@Model.QuestaoAtual.discipline - (Q. @(Model.QuestaoAtualIndex + 1)/@Model.TotalQuestoes)</small>
                </div>
            </div>

            <div class="progress-indicator my-4 justify-content-center">
                @for (int i = 0; i < Model.TotalQuestoes; i++)
                {
                    var dotClass = "progress-dot";
                    if (i == Model.QuestaoAtualIndex)
                    {
                        dotClass += " active";
                    }
                    <span class="@dotClass"></span>
                }
            </div>

            <h4 class="my-4">QUESTÃO @(Model.QuestaoAtualIndex + 1)</h4>

            <p>@Html.Raw(Model.QuestaoAtual.enunciado)</p>

            <form asp-action="RegistrarResposta" method="post">
                <input type="hidden" name="simuladoId" value="@Model.SimuladoId" />
                <input type="hidden" name="questaoId" value="@Model.QuestaoAtual.id" />

                <div class="options mt-4">
                    @foreach (var alt in Model.QuestaoAtual.alternatives)
                    {
                        var isChecked = Model.RespostaUsuario == alt.Key;
                        <input type="radio" name="resposta" id="opt@(alt.Key)" value="@alt.Key" checked="@isChecked">
                        <label for="opt@(alt.Key)" class="option-label">@alt.Key) @alt.Value</label>
                    }
                </div>

                <hr>

                <div class="d-flex justify-content-between mt-3">
                    @if (Model.QuestaoAtualIndex > 0)
                    {
                        <a asp-action="RealizaSimulado" asp-route-id="@Model.SimuladoId" asp-route-questaoIndex="@(Model.QuestaoAtualIndex - 1)" class="btn btn-secondary">Questão Anterior</a>
                    }
                    else
                    {
                        <span></span>
                    }

                    <button type="submit" class="btn btn-primary">Próxima Questão</button>
                </div>
            </form>
        </div>
    </div>

    <script>
        let simuladoId = @Model.SimuladoId;
        let elapsedSeconds = 0;
        const timerEl = document.getElementById("timer");

        function formatTime(seconds) {
            let h = Math.floor(seconds / 3600).toString().padStart(2, "0");
            let m = Math.floor((seconds % 3600) / 60).toString().padStart(2, "0");
            let s = (seconds % 60).toString().padStart(2, "0");
            return `${h}:${m}:${s}`;
        }

        async function loadTempo() {
            try {
                const response = await fetch(`/Simulado/GetTempo/${simuladoId}`);
                if (response.ok) {
                    const data = await response.json();
                    elapsedSeconds = data.seconds || 0;
                    timerEl.textContent = formatTime(elapsedSeconds);
                }
            } catch (e) {
                console.error("Erro ao carregar tempo:", e);
            }
        }

        async function saveTempo() {
            try {
                await fetch(`/Simulado/SetTempo/${simuladoId}`, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ seconds: elapsedSeconds })
                });
            } catch (e) {
                console.error("Erro ao salvar tempo:", e);
            }
        }

        function startTimer() {
            setInterval(() => {
                elapsedSeconds++;
                timerEl.textContent = formatTime(elapsedSeconds);
            }, 1000);

            setInterval(saveTempo, 10000); // salva a cada 10s
        }

        window.addEventListener("beforeunload", saveTempo);

        loadTempo().then(startTimer);
    </script>
</body>
</html>