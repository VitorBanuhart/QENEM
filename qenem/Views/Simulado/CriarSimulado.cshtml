@model qenem.Models.ListaQuestaoSimulado
@{
    ViewData["Title"] = "Criação de Simulado";
    var areas = new[]
    {
        new { Texto = "Ciências Humanas", Valor = "ciencias-humanas" },
        new { Texto = "Ciências da Natureza", Valor = "ciencias-natureza" },
        new { Texto = "Linguagens", Valor = "linguagens" },
        new { Texto = "Matemática", Valor = "matematica" },
        new { Texto = "Espanhol", Valor = "espanhol" },
        new { Texto = "Inglês", Valor = "ingles" }
    };
}

<h4 class="mb-4">Tela Criação Simulado</h4>

<form id="formCriarSimulado" method="post" asp-action="CriarSimulado" asp-controller="Simulado">
    <div class="card mt-3" id="card-criar-simulado">

        <div class="card-body">
            <div class="mb-4">
                <h5>Áreas de interesse</h5>
                @foreach (var area in areas)
                {
                    var idCheck = "check" + area.Valor;
                    <div class="form-check">
                        <input class="form-check-input area-interesse"
                               type="checkbox"
                               value="@area.Valor"
                               id="@idCheck"
                               name="AreasSelecionadas" />
                        <label class="form-check-label" for="@idCheck">@area.Texto</label>
                    </div>
                }
            </div>

            <div class="mb-4">
                <h5>Anos</h5>
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="TipoAnos" id="anosTodos" value="todos" checked />
                    <label class="form-check-label" for="anosTodos">Todos</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="TipoAnos" id="anosEspecificos" value="especificos" data-bs-toggle="modal" data-bs-target="#modalAnos" />
                    <label class="form-check-label" for="anosEspecificos">Específicos...</label>
                </div>
                <input type="hidden" id="anosSelecionados" name="AnosSelecionados" />
            </div>

            <div class="mb-3">
                <label for="numeroQuestoes" class="form-label">Insira o número de questões</label>
                <input type="number" class="form-control" id="numeroQuestoes" name="NumeroQuestoes" placeholder="Ex: 10, 50, 180" max="180" />
            </div>

            <div class="mb-4">
                <label for="nomeSimulado" class="form-label">Insira o nome do simulado</label>
                <input type="text" class="form-control" id="nomeSimulado" name="NomeSimulado" placeholder="Máximo de 30 caracteres" maxlength="30" />
            </div>

            <div class="d-flex justify-content-between">
                <button type="button" class="btn btn-outline-secondary">? Ajuda</button>
                <button id="btnConfirmar" type="submit" class="btn btn-primary" disabled>Criar Simulado</button>
            </div>
        </div>
    </div>
</form>

<partial name="ModalAnos" />

@section Scripts {

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {

            const form = document.getElementById('formCriarSimulado');
            const btnConfirmar = document.getElementById('btnConfirmar');
            const nomeSimuladoInput = document.getElementById('nomeSimulado');
            const numeroQuestoesInput = document.getElementById('numeroQuestoes');
            const areasCheckboxes = document.querySelectorAll('.area-interesse');
            const radioAnosTodos = document.getElementById('anosTodos');
            const radioAnosEspecificos = document.getElementById('anosEspecificos');
            const modalAnos = new bootstrap.Modal(document.getElementById('modalAnos'));
            const anosSelecionadosInput = document.getElementById('anosSelecionados');

            function validarFormulario() {
                const nomeValido = nomeSimuladoInput.value.trim().length > 0;
                const questoesValidas = parseInt(numeroQuestoesInput.value, 10) > 0;
                const areaSelecionada = Array.from(areasCheckboxes).some(cb => cb.checked);
                btnConfirmar.disabled = !(nomeValido && questoesValidas && areaSelecionada);
            }

            nomeSimuladoInput.addEventListener('input', validarFormulario);
            numeroQuestoesInput.addEventListener('input', validarFormulario);
            areasCheckboxes.forEach(cb => cb.addEventListener('change', validarFormulario));

            // Modal anos
            radioAnosEspecificos.addEventListener('click', function(e) {
                if (!anosSelecionadosInput.value) {
                    radioAnosTodos.checked = true; // Mantém "Todos" se nada selecionado
                }
            });

            document.getElementById('btnConfirmaAnos').addEventListener('click', function() {
                const anosInput = document.getElementById('inputAnos');
                anosSelecionadosInput.value = anosInput.value;
                if (anosInput.value) {
                    radioAnosEspecificos.checked = true;
                }
                modalAnos.hide();
            });

            const anosDisponiveis = [2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023];

            btnConfirmar.addEventListener('click', async function(e) {
                e.preventDefault();

                const todosSelecionado = radioAnosTodos.checked;


                const simuladoData = {
                    NomeSimulado: nomeSimuladoInput.value.trim(),
                    NumeroQuestoes: parseInt(numeroQuestoesInput.value, 10),
                    AreasSelecionadas: Array.from(areasCheckboxes)
                        .filter(cb => cb.checked)
                        .map(cb => cb.value),
                    AnosSelecionados: todosSelecionado //todos > manda array geral / especifico > monta array conforme preenchimento
                        ? anosDisponiveis
                        : (anosSelecionadosInput.value
                            ? anosSelecionadosInput.value.split(',').map(a => parseInt(a.trim(), 10))
                            : [])
                };

                try {
                    const response = await fetch('@Url.Action("CriarSimulado", "Simulado")', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(simuladoData)
                    });


                    const result = await response.json();
                    if (result && result.success && result.simulado && result.simulado.id) {
                        window.location.href = `/Simulado/RealizaSimulado?id=${result.simulado.id}`;
                    } else {
                        Swal.fire('Erro!', result?.message || 'Não foi possível criar o simulado.', 'error');
                    }

                } catch (err) {
                    console.error('Erro ao criar simulado:', err);
                    Swal.fire('Erro!', 'Não foi possível criar o simulado.', 'error');
                }

            });
        });
    </script>
}
