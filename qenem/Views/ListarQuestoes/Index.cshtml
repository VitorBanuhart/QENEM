@model List<qenem.Models.Question>
@using Markdig

@{
    ViewBag.Title = "Questões ENEM";
}

<div class="container mt-4">
    <div class="row">
        <div class="col-2 d-flex flex-column align-items-start">
            @for (int i = 0; i < Model.Count; i++)
            {
                <button class="btn btn-outline-primary rounded-circle mb-2"
                        style="width: 45px; height: 45px;"
                        onclick="mostrarQuestao(@i)">
                    @(i + 1)
                </button>
            }
        </div>

        <div class="col-10">
            @for (int i = 0; i < Model.Count; i++)
            {
                var questao = Model[i];

                <div id="questao-@i" class="questao" style="display:@(i == 0 ? "block" : "none")">

                    <h4>Questão @(i + 1): @questao.title (@questao.year)</h4>
                    <p><strong>Disciplina:</strong> @questao.discipline</p>
                    @if (questao.language != null)
                    {
                        <p><strong>Língua:</strong> @questao.language</p>
                    }

                    <p>@Html.Raw(Markdown.ToHtml(questao.context ?? ""))</p>
                    <p>@Html.Raw(Markdown.ToHtml(questao.alternativesIntroduction ?? ""))</p>

                    <div class="list-group">
                        @foreach (var alt in questao.alternatives)
                        {
                            <button class="list-group-item list-group-item-action alternativa"
                                    data-letra="@alt.letter"
                                    onclick="selecionarAlternativa(this, @i)">
                                <strong>@alt.letter)</strong> @alt.text
                            </button>
                        }
                    </div>

                    <div class="mt-3 d-flex justify-content-between">
                        <button class="btn btn-info" onclick="anterior(@i)">Pergunta anterior</button>
                        <button class="btn btn-success" onclick="verificarResposta(@i, '@questao.correctAlternative')">Verificar resposta</button>

                        @if (i == Model.Count - 1)
                        {
                            <button class="btn btn-primary" onclick="gerarMaisQuestoes()">Gerar mais questões</button>
                        }
                        else
                        {
                            <button class="btn btn-info" onclick="proxima(@i)">Próxima pergunta</button>
                        }
                    </div>

                    <div class="mt-3">
                        <button class="btn btn-warning" onclick="alert('Funcionalidade ainda não implementada')">
                            Adicionar a uma lista
                        </button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const TOTAL = @Model.Count;

        function mostrarQuestao(index) {
            document.querySelectorAll('.questao').forEach(q => q.style.display = 'none');
            const div = document.getElementById('questao-' + index);
            if (div) div.style.display = 'block';
        }

        function selecionarAlternativa(btn, questaoIndex) {
            const alternativas = document.querySelectorAll('#questao-' + questaoIndex + ' .alternativa');
            alternativas.forEach(a => a.classList.remove('active'));
            btn.classList.add('active');
        }

        function verificarResposta(index, correta) {
            const selecionada = document.querySelector('#questao-' + index + ' .alternativa.active');
            if (!selecionada) {
                alert("Selecione uma alternativa antes de verificar.");
                return;
            }
            const letra = selecionada.getAttribute("data-letra");
            alert(letra === correta ? "Resposta correta!" : "Resposta incorreta! A correta é: " + correta);
        }

        // Não exige alternativa selecionada para avançar
        function proxima(index) {
            if (index + 1 < TOTAL) {
                mostrarQuestao(index + 1);
            } else {
                alert("Você está na última questão.");
            }
        }

        function anterior(index) {
            if (index - 1 >= 0) {
                mostrarQuestao(index - 1);
            } else {
                alert("Você está na primeira questão.");
            }
        }

        function gerarMaisQuestoes() {
            fetch('/ListarQuestoes/GerarQuestoesMock', {
                method: 'POST'
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error("Erro ao buscar novas questões.");
                }
                return response.json();
            })
            .then(novasQuestoes => {
                atualizarQuestoes(novasQuestoes);
            })
            .catch(error => {
                console.error("Erro:", error);
                alert("Erro inesperado.");
            });
        }

        // Função para renderizar as questões dinamicamente
        function atualizarQuestoes(questoes) {
            const colQuestoes = document.querySelector('.col-10');
            const colBotoes = document.querySelector('.col-2');
            if (!colQuestoes || !colBotoes) return;

            // Renderiza os botões de navegação
            let botoesHtml = '';
            for (let i = 0; i < questoes.length; i++) {
                botoesHtml += `<button class="btn btn-outline-primary rounded-circle mb-2"
                    style="width: 45px; height: 45px;"
                    onclick="mostrarQuestao(${i})">${i + 1}</button>`;
            }
            colBotoes.innerHTML = botoesHtml;

            // Renderiza as questões
            let questoesHtml = '';
            for (let i = 0; i < questoes.length; i++) {
                const questao = questoes[i];
                questoesHtml += `
                <div id="questao-${i}" class="questao" style="display:${i == 0 ? "block" : "none"}">
                    <h4>Questão ${i + 1}: ${questao.title} (${questao.year})</h4>
                    <p><strong>Disciplina:</strong> ${questao.discipline}</p>
                    ${questao.language ? `<p><strong>Língua:</strong> ${questao.language}</p>` : ""}
                    <p>${questao.context ?? ""}</p>
                    <p>${questao.alternativesIntroduction ?? ""}</p>
                    <div class="list-group">
                        ${questao.alternatives.map(alt => `
                            <button class="list-group-item list-group-item-action alternativa"
                                data-letra="${alt.letter}"
                                onclick="selecionarAlternativa(this, ${i})">
                                <strong>${alt.letter})</strong> ${alt.text}
                            </button>
                        `).join('')}
                    </div>
                    <div class="mt-3 d-flex justify-content-between">
                        <button class="btn btn-info" onclick="anterior(${i})">Pergunta anterior</button>
                        <button class="btn btn-success" onclick="verificarResposta(${i}, '${questao.correctAlternative}')">Verificar resposta</button>
                        ${i == questoes.length - 1
                            ? `<button class="btn btn-primary" onclick="gerarMaisQuestoes()">Gerar mais questões</button>`
                            : `<button class="btn btn-info" onclick="proxima(${i})">Próxima pergunta</button>`
                        }
                    </div>
                    <div class="mt-3">
                        <button class="btn btn-warning" onclick="alert('Funcionalidade ainda não implementada')">
                            Adicionar a uma lista
                        </button>
                    </div>
                </div>
                `;
            }
            colQuestoes.innerHTML = questoesHtml;
            window.TOTAL = questoes.length; // Atualiza variável global
        }
    </script>
}